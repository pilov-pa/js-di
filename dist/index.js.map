{"version":3,"sources":["../src/index.js"],"names":["DI","name","className","args","shared","tags","services","hasOwnProperty","Error","compiled","config","Array","isArray","serviceConfig","add","tag","result","serviceName","service","indexOf","push","resolve","value","parameters","parameterName","addParameter","resolvedArgs","argIndex","arg","resolvedArg","processedArgName","substring","getParameter"],"mappings":"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","sourcesContent":["export default class DI {\r\n    services = {};\r\n\r\n    parameters = {};\r\n\r\n    add(name, className, args = [], shared = true, tags = []) {\r\n        if (typeof name === 'object') {\r\n            if (this.services.hasOwnProperty(name.name)) {\r\n                throw new Error(\"Service '\" + name.name + \"' already exists\");\r\n            }\r\n\r\n            this.services[name.name] = {\r\n                name: name.name,\r\n                className: name.class,\r\n                args: name.args,\r\n                shared: name.shared,\r\n                tags: name.tags,\r\n                compiled: null,\r\n            };\r\n        } else {\r\n            if (this.services.hasOwnProperty(name)) {\r\n                throw new Error(\"Service '\" + name + \"' already exists\");\r\n            }\r\n\r\n            if (!(typeof className === 'function')) {\r\n                throw new Error(\"Parameter 'className' should be a class constructor\");\r\n            }\r\n\r\n            this.services[name] = {\r\n                name: name,\r\n                className: className,\r\n                args: args,\r\n                shared: shared,\r\n                tags: tags,\r\n                compiled: null,\r\n            };\r\n        }\r\n    }\r\n\r\n    addMulti(config) {\r\n        if (!Array.isArray(config)) {\r\n            throw new Error('Config should be an array');\r\n        }\r\n        for (const serviceConfig of config) {\r\n            this.add(serviceConfig);\r\n        }\r\n    }\r\n\r\n    getByTag(tag) {\r\n        let result = [];\r\n        for (const serviceName in this.services) {\r\n            const service = this.services[serviceName];\r\n            if (service.tags.indexOf(tag) !== -1) {\r\n                result.push(this.resolve(serviceName));\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    remove(name) {\r\n        if (typeof this.services[name] === 'undefined') {\r\n            throw new Error(\"Service '\" + name + \"' not found\");\r\n        }\r\n\r\n        delete this.services[name];\r\n    }\r\n\r\n    has(name) {\r\n        return !(typeof this.services[name] === 'undefined');\r\n    }\r\n\r\n    addParameter(name, value) {\r\n        if (this.parameters.hasOwnProperty(name)) {\r\n            throw new Error(\"Parameter '\" + name + \"' already exists\");\r\n        }\r\n        this.parameters[name] = value;\r\n    }\r\n\r\n    addParameters(parameters) {\r\n        for (let parameterName in parameters) {\r\n            this.addParameter(parameterName, parameters[parameterName]);\r\n        }\r\n    }\r\n\r\n    getParameter(parameterName) {\r\n        if (!this.parameters.hasOwnProperty(parameterName)) {\r\n            throw new Error(\"Parameter '\" + parameterName + \"' not found\");\r\n        }\r\n\r\n        return this.parameters[parameterName];\r\n    }\r\n\r\n    hasParameter(parameterName) {\r\n        return this.parameters.hasOwnProperty(parameterName);\r\n    }\r\n\r\n    removeParameter(parameterName) {\r\n        if (!this.parameters.hasOwnProperty(parameterName)) {\r\n            throw new Error(\"Parameter '\" + parameterName + \"' not found\");\r\n        }\r\n\r\n        delete this.parameters[parameterName];\r\n    }\r\n\r\n    resolve(name) {\r\n        if (!this.services[name]) {\r\n            throw new Error(\"Service '\" + name + \"' not found\");\r\n        }\r\n\r\n        const service = this.services[name];\r\n\r\n        if (service.shared && service.compiled !== null) {\r\n            return service.compiled;\r\n        }\r\n\r\n        let resolvedArgs = [];\r\n        for (const argIndex in service.args) {\r\n            const arg = service.args[argIndex];\r\n            let resolvedArg;\r\n            if (typeof arg === 'string') {\r\n                if (arg.indexOf('@') === 0) {\r\n                    const processedArgName = arg.substring(1);\r\n                    resolvedArg = this.getParameter(processedArgName);\r\n                } else if (arg.indexOf(':') === 0) {\r\n                    const processedArgName = arg.substring(1);\r\n                    resolvedArg = this.resolve(processedArgName);\r\n                } else {\r\n                    resolvedArg = arg;\r\n                }\r\n            } else {\r\n                resolvedArg = arg;\r\n            }\r\n            resolvedArgs.push(resolvedArg);\r\n        }\r\n\r\n        const result = new service.className(...resolvedArgs);\r\n        if (service.shared) {\r\n            service.compiled = result;\r\n        }\r\n        return result;\r\n    }\r\n}\r\n"],"file":"index.js"}